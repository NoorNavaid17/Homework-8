#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int rows, cols;
    int** data;
} Matrix;

Matrix create_matrix(int rows, int cols) {
    Matrix m;
    m.rows = rows;
    m.cols = cols;
    m.data = malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        m.data[i] = malloc(cols * sizeof(int));
    }
    return m;
}

void free_matrix(Matrix* m) {
    for (int i = 0; i < m->rows; i++) {
        free(m->data[i]);
    }
    free(m->data);
}

Matrix scalar_multiply(Matrix m, int scalar) {
    Matrix res = create_matrix(m.rows, m.cols);
    for (int i = 0; i < m.rows; i++)
        for (int j = 0; j < m.cols; j++)
            res.data[i][j] = m.data[i][j] * scalar;
    return res;
}

Matrix transpose(Matrix m) {
    Matrix t = create_matrix(m.cols, m.rows);
    for (int i = 0; i < m.rows; i++)
        for (int j = 0; j < m.cols; j++)
            t.data[j][i] = m.data[i][j];
    return t;
}

Matrix multiply(Matrix a, Matrix b) {
    Matrix res = create_matrix(a.rows, b.cols);
    for (int i = 0; i < a.rows; i++)
        for (int j = 0; j < b.cols; j++)
            for (int k = 0; k < a.cols; k++)
                res.data[i][j] += a.data[i][k] * b.data[k][j];
    return res;
}

Matrix add(Matrix a, Matrix b) {
    Matrix res = create_matrix(a.rows, a.cols);
    for (int i = 0; i < a.rows; i++)
        for (int j = 0; j < a.cols; j++)
            res.data[i][j] = a.data[i][j] + b.data[i][j];
    return res;
}

void print_matrix(Matrix m) {
    for (int i = 0; i < m.rows; i++) {
        for (int j = 0; j < m.cols; j++)
            printf("%d ", m.data[i][j]);
        printf("\n");
    }
}

int main() {
    Matrix A = create_matrix(2, 2);
    Matrix B = create_matrix(2, 3);
    Matrix C = create_matrix(2, 3);

    A.data[0][0] = 6; A.data[0][1] = 4;
    A.data[1][0] = 8; A.data[1][1] = 3;

    B.data[0][0] = 1; B.data[0][1] = 2; B.data[0][2] = 3;
    B.data[1][0] = 4; B.data[1][1] = 5; B.data[1][2] = 6;

    C.data[0][0] = 2; C.data[0][1] = 4; C.data[0][2] = 6;
    C.data[1][0] = 1; C.data[1][1] = 3; C.data[1][2] = 5;

    Matrix B_scaled = scalar_multiply(B, 3);
    Matrix CT = transpose(C);
    Matrix product = multiply(B_scaled, CT);
    Matrix result = add(A, product);

    printf("D = A + (3 * B) * C^T:\n");
    print_matrix(result);

    free_matrix(&A); free_matrix(&B); free_matrix(&C);
    free_matrix(&B_scaled); free_matrix(&CT);
    free_matrix(&product); free_matrix(&result);

    return 0;
}
